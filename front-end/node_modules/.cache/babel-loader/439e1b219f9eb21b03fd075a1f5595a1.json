{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\OneDrive\\\\Desktop\\\\Full_stack_Project\\\\Chatapplication\\\\Full-stack-project-springboot-ChatApp\\\\front-end\\\\src\\\\components\\\\ChatRoom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { over } from \"stompjs\";\nimport SockJS from \"sockjs-client\";\nimport Login from \"./Login\";\nimport \"./ChatRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [tab, setTab] = useState(\"CHATROOM\");\n  const [isLogin, setLogin] = useState(false);\n  const userData = {};\n  const [file, setfile] = useState(false);\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connect = () => {\n    let Sock = new SockJS(\"http://localhost:9090/ws\");\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      connected: true\n    });\n    stompClient.subscribe(\"/chatroom/public\", onMessageReceived);\n    stompClient.subscribe(\"/user/\" + userData.username + \"/private\", onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    setUserData({ ...userData,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      console.log(\"h\");\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\",\n        file: userData.file\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        message: \"\"\n      });\n    }\n  };\n\n  const sendPrivateValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        receiverName: tab,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n\n      if (userData.username !== tab) {\n        privateChats.get(tab).push(chatMessage);\n        setPrivateChats(new Map(privateChats));\n      }\n\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        message: \"\"\n      });\n    }\n  };\n\n  const registerUser = e => {\n    e.preventDefault();\n    connect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(\"CHATROOM\");\n            },\n            className: `member ${tab === \"CHATROOM\" && \"active\"}`,\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => {\n              setTab(name);\n            },\n            className: `member ${tab === name && \"active\"}`,\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [file ? null : /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            name: \"message\",\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"file\",\n            name: \"file\",\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button Button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this), tab !== \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: [...privateChats.get(tab)].map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 21\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 23\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            name: \"message\",\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button Button\",\n            onClick: sendPrivateValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Login, {\n      userData: userData,\n      registerUser: registerUser\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"EyCo24iK4uR14rgGOZ0cbxLJCFU=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"sources":["C:/Users/asus/OneDrive/Desktop/Full_stack_Project/Chatapplication/Full-stack-project-springboot-ChatApp/front-end/src/components/ChatRoom.jsx"],"names":["React","useEffect","useState","over","SockJS","Login","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","tab","setTab","isLogin","setLogin","userData","file","setfile","console","log","connect","Sock","onConnected","onError","setUserData","connected","subscribe","onMessageReceived","username","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","err","handleMessage","event","target","name","value","sendValue","message","sendPrivateValue","receiverName","registerUser","e","preventDefault","keys","map","index","chat"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { over } from \"stompjs\";\r\nimport SockJS from \"sockjs-client\";\r\nimport Login from \"./Login\";\r\nimport \"./ChatRoom.css\";\r\n\r\nvar stompClient = null;\r\nconst ChatRoom = () => {\r\n  const [privateChats, setPrivateChats] = useState(new Map());\r\n  const [publicChats, setPublicChats] = useState([]);\r\n  const [tab, setTab] = useState(\"CHATROOM\");\r\n  const [isLogin,setLogin] = useState(false);\r\n  const userData = {\r\n    \r\n  }\r\n  const [file,setfile] = useState(false);\r\n  useEffect(() => {\r\n    console.log(userData);\r\n  }, [userData]);\r\n\r\n  const connect = () => {\r\n    let Sock = new SockJS(\"http://localhost:9090/ws\");\r\n    stompClient = over(Sock);\r\n    stompClient.connect({}, onConnected, onError);\r\n  };\r\n\r\n  const onConnected = () => {\r\n    setUserData({ ...userData, connected: true });\r\n    stompClient.subscribe(\"/chatroom/public\", onMessageReceived);\r\n    stompClient.subscribe(\r\n      \"/user/\" + userData.username + \"/private\",\r\n      onPrivateMessage\r\n    );\r\n    userJoin();\r\n  };\r\n\r\n  const userJoin = () => {\r\n    var chatMessage = {\r\n      senderName: userData.username,\r\n      status: \"JOIN\",\r\n    };\r\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n  };\r\n\r\n  const onMessageReceived = (payload) => {\r\n    var payloadData = JSON.parse(payload.body);\r\n    switch (payloadData.status) {\r\n      case \"JOIN\":\r\n        if (!privateChats.get(payloadData.senderName)) {\r\n          privateChats.set(payloadData.senderName, []);\r\n          setPrivateChats(new Map(privateChats));\r\n        }\r\n        break;\r\n      case \"MESSAGE\":\r\n        publicChats.push(payloadData);\r\n        setPublicChats([...publicChats]);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onPrivateMessage = (payload) => {\r\n    console.log(payload);\r\n    var payloadData = JSON.parse(payload.body);\r\n    if (privateChats.get(payloadData.senderName)) {\r\n      privateChats.get(payloadData.senderName).push(payloadData);\r\n      setPrivateChats(new Map(privateChats));\r\n    } else {\r\n      let list = [];\r\n      list.push(payloadData);\r\n      privateChats.set(payloadData.senderName, list);\r\n      setPrivateChats(new Map(privateChats));\r\n    }\r\n  };\r\n\r\n  const onError = (err) => {\r\n    console.log(err);\r\n  };\r\n\r\n  const handleMessage = (event) => {\r\n    setUserData({ ...userData, [event.target.name]:event.target.value });\r\n  };\r\n  const sendValue = () => {\r\n    if (stompClient) {\r\n      console.log(\"h\");\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        message: userData.message,\r\n        status: \"MESSAGE\",\r\n        file:userData.file\r\n      };\r\n      console.log(chatMessage);\r\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  };\r\n\r\n  const sendPrivateValue = () => {\r\n    if (stompClient) {\r\n      var chatMessage = {\r\n        senderName: userData.username,\r\n        receiverName: tab,\r\n        message: userData.message,\r\n        status: \"MESSAGE\",\r\n      };\r\n\r\n      if (userData.username !== tab) {\r\n        privateChats.get(tab).push(chatMessage);\r\n        setPrivateChats(new Map(privateChats));\r\n      }\r\n      stompClient.send(\"/app/private-message\", {}, JSON.stringify(chatMessage));\r\n      setUserData({ ...userData, message: \"\" });\r\n    }\r\n  };\r\n\r\n  const registerUser = (e) => {\r\n    e.preventDefault();\r\n    connect();\r\n  };\r\n  return (\r\n    <div className=\"container\">\r\n      {userData.connected ? (\r\n        <div className=\"chat-box\">\r\n          <div className=\"member-list\">\r\n            <ul>\r\n              <li\r\n                onClick={() => {\r\n                  setTab(\"CHATROOM\");\r\n                }}\r\n                className={`member ${tab === \"CHATROOM\" && \"active\"}`}\r\n              >\r\n                Chatroom\r\n              </li>\r\n              {[...privateChats.keys()].map((name, index) => (\r\n                <li\r\n                  onClick={() => {\r\n                    setTab(name);\r\n                  }}\r\n                  className={`member ${tab === name && \"active\"}`}\r\n                  key={index}\r\n                >\r\n                  {name}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          {tab === \"CHATROOM\" && (\r\n            <div className=\"chat-content\">\r\n              {file  ? null : <ul className=\"chat-messages\">\r\n                {publicChats.map((chat, index) => (\r\n                  <li\r\n                    className={`message ${\r\n                      chat.senderName === userData.username && \"self\"\r\n                    }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>}\r\n              \r\n\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  name=\"message\"\r\n                  onChange={handleMessage}\r\n                >\r\n                </input>\r\n                <input type=\"file\" id=\"file\" name=\"file\" onChange={handleMessage} />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button Button\"\r\n                  onClick={sendValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {tab !== \"CHATROOM\" && (\r\n            <div className=\"chat-content\">\r\n              <ul className=\"chat-messages\">\r\n                {[...privateChats.get(tab)].map((chat, index) => (\r\n                  <li\r\n                    className={`message ${\r\n                      chat.senderName === userData.username && \"self\"\r\n                    }`}\r\n                    key={index}\r\n                  >\r\n                    {chat.senderName !== userData.username && (\r\n                      <div className=\"avatar\">{chat.senderName}</div>\r\n                    )}\r\n                    <div className=\"message-data\">{chat.message}</div>\r\n                    {chat.senderName === userData.username && (\r\n                      <div className=\"avatar self\">{chat.senderName}</div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n\r\n              <div className=\"send-message\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"input-message\"\r\n                  placeholder=\"enter the message\"\r\n                  value={userData.message}\r\n                  name=\"message\"\r\n                  onChange={handleMessage}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"send-button Button\"\r\n                  onClick={sendPrivateValue}\r\n                >\r\n                  send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <Login\r\n          userData = {userData}\r\n          registerUser={registerUser}\r\n        ></Login>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n"]},"metadata":{},"sourceType":"module"}